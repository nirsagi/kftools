apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: scheduledworkflows.kubeflow.org
spec:
  group: kubeflow.org
  names:
    kind: ScheduledWorkflow
    listKind: ScheduledWorkflowList
    plural: scheduledworkflows
    shortNames:
    - swf
    singular: scheduledworkflow
  scope: Namespaced
  versions:
  - name: v1beta1
    served: true
    storage: true
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  labels:
    ksonnet.io/component: pipeline
  name: viewers.kubeflow.org
spec:
  group: kubeflow.org
  names:
    kind: Viewer
    listKind: ViewerList
    plural: viewers
    shortNames:
    - vi
    singular: viewer
  scope: Namespaced
  versions:
  - name: v1beta1
    served: true
    storage: true
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: workflows.argoproj.io
spec:
  group: argoproj.io
  names:
    kind: Workflow
    plural: workflows
    shortNames:
    - wf
  scope: Namespaced
  version: v1alpha1
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argo
  namespace: <namespace>
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ml-pipeline-persistenceagent
  namespace: <namespace>
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ml-pipeline-scheduledworkflow
  namespace: <namespace>
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ml-pipeline-ui
  namespace: <namespace>
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ml-pipeline-viewer-crd-service-account
  namespace: <namespace>
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ml-pipeline
  namespace: <namespace>
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pipeline-runner
  namespace: <namespace>
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: argo-role
  namespace: <namespace>
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - pods/exec
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - create
  - delete
- apiGroups:
  - argoproj.io
  resources:
  - workflows
  - workflows/finalizers
  verbs:
  - get
  - list
  - watch
  - update
  - patch
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: ml-pipeline-persistenceagent-role
  namespace: <namespace>
rules:
- apiGroups:
  - argoproj.io
  resources:
  - workflows
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - kubeflow.org
  resources:
  - scheduledworkflows
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  labels:
    app: ml-pipeline-scheduledworkflow-role
  name: ml-pipeline-scheduledworkflow-role
  namespace: <namespace>
rules:
- apiGroups:
  - argoproj.io
  resources:
  - workflows
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - patch
  - delete
- apiGroups:
  - kubeflow.org
  resources:
  - scheduledworkflows
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - patch
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  labels:
    app: ml-pipeline-ui
  name: ml-pipeline-ui
  namespace: <namespace>
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - pods/log
  verbs:
  - create
  - get
  - list
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: ml-pipeline-viewer-controller-role
  namespace: <namespace>
rules:
- apiGroups:
  - '*'
  resources:
  - deployments
  - services
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - patch
  - delete
- apiGroups:
  - kubeflow.org
  resources:
  - viewers
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - patch
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  labels:
    app: ml-pipeline
  name: ml-pipeline
  namespace: <namespace>
rules:
- apiGroups:
  - argoproj.io
  resources:
  - workflows
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - patch
  - delete
- apiGroups:
  - kubeflow.org
  resources:
  - scheduledworkflows
  verbs:
  - create
  - get
  - list
  - update
  - patch
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: pipeline-runner
  namespace: <namespace>
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - create
  - delete
- apiGroups:
  - argoproj.io
  resources:
  - workflows
  verbs:
  - get
  - list
  - watch
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - pods
  - pods/exec
  - pods/log
  - services
  verbs:
  - '*'
- apiGroups:
  - ""
  - apps
  - extensions
  resources:
  - deployments
  - replicasets
  verbs:
  - '*'
- apiGroups:
  - kubeflow.org
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - batch
  resources:
  - jobs
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argo-binding
  namespace: <namespace>
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: argo-role
subjects:
- kind: ServiceAccount
  name: argo
  namespace: <namespace>
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: ml-pipeline-persistenceagent-binding
  namespace: <namespace>
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ml-pipeline-persistenceagent-role
subjects:
- kind: ServiceAccount
  name: ml-pipeline-persistenceagent
  namespace: <namespace>
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: ml-pipeline-scheduledworkflow-binding
  namespace: <namespace>
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ml-pipeline-scheduledworkflow-role
subjects:
- kind: ServiceAccount
  name: ml-pipeline-scheduledworkflow
  namespace: <namespace>
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  labels:
    app: ml-pipeline-ui
  name: ml-pipeline-ui
  namespace: <namespace>
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ml-pipeline-ui
subjects:
- kind: ServiceAccount
  name: ml-pipeline-ui
  namespace: <namespace>
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: ml-pipeline-viewer-crd-binding
  namespace: <namespace>
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ml-pipeline-viewer-controller-role
subjects:
- kind: ServiceAccount
  name: ml-pipeline-viewer-crd-service-account
  namespace: <namespace>
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  labels:
    app: ml-pipeline
  name: ml-pipeline
  namespace: <namespace>
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ml-pipeline
subjects:
- kind: ServiceAccount
  name: ml-pipeline
  namespace: <namespace>
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: pipeline-runner-binding
  namespace: <namespace>
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: pipeline-runner
subjects:
- kind: ServiceAccount
  name: pipeline-runner
  namespace: <namespace>
---
apiVersion: v1
data:
  config: |
    {
      namespace: <namespace>,
      executorImage: argoproj/argoexec:v2.2.0,
      artifactRepository:
      {
          s3: {
              bucket: bigdata,
              keyPrefix: mlpipeline,
              endpoint: v3io-webapi.<namespace>:8081,
              insecure: true,
              accessKeySecret: {
                  name: mlpipeline-v3io,
                  key: accesskey
              },
              secretKeySecret: {
                  name: mlpipeline-v3io,
                  key: secretkey
              }
          }
      }
    }
kind: ConfigMap
metadata:
  name: workflow-controller-configmap
  namespace: <namespace>
---
apiVersion: v1
data:
  accesskey: <accesskeybase64>
kind: Secret
metadata:
  name: v3io-webapi-secret
  namespace: <namespace>
type: Opaque
---
apiVersion: v1
data:
  accesskey: bWluaW8=
  secretkey: bWluaW8xMjM=
kind: Secret
metadata:
  name: mlpipeline-minio-artifact
  namespace: <namespace>
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ml-pipeline-ui
  name: ml-pipeline-ui
  namespace: <namespace>
spec:
  ports:
  - port: 80
    targetPort: 3000
  selector:
    app: ml-pipeline-ui
---
apiVersion: v1
kind: Service
metadata:
  name: ml-pipeline
  namespace: <namespace>
spec:
  ports:
  - name: http
    port: 8888
    protocol: TCP
    targetPort: 8888
  - name: grpc
    port: 8887
    protocol: TCP
    targetPort: 8887
  selector:
    app: ml-pipeline
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: <namespace>
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  labels:
    app: ml-pipeline-persistenceagent
  name: ml-pipeline-persistenceagent
  namespace: <namespace>
spec:
  selector:
    matchLabels:
      app: ml-pipeline-persistenceagent
  template:
    metadata:
      labels:
        app: ml-pipeline-persistenceagent
    spec:
      containers:
      - env:
        - name: NAMESPACE
          value: <namespace>
        image: gcr.io/ml-pipeline/persistenceagent:0.1.20
        imagePullPolicy: IfNotPresent
        name: ml-pipeline-persistenceagent
      serviceAccountName: ml-pipeline-persistenceagent
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  labels:
    app: ml-pipeline-scheduledworkflow
  name: ml-pipeline-scheduledworkflow
  namespace: <namespace>
spec:
  selector:
    matchLabels:
      app: ml-pipeline-scheduledworkflow
  template:
    metadata:
      labels:
        app: ml-pipeline-scheduledworkflow
    spec:
      containers:
      - env:
        - name: NAMESPACE
          value: <namespace>
        image: gcr.io/ml-pipeline/scheduledworkflow:0.1.20
        imagePullPolicy: IfNotPresent
        name: ml-pipeline-scheduledworkflow
      serviceAccountName: ml-pipeline-scheduledworkflow
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  labels:
    app: ml-pipeline-ui
  name: ml-pipeline-ui
  namespace: <namespace>
spec:
  selector:
    matchLabels:
      app: ml-pipeline-ui
  template:
    metadata:
      labels:
        app: ml-pipeline-ui
    spec:
      containers:
      - env:
        - name: MINIO_NAMESPACE
          value: <namespace>
        - name: MINIO_PORT
          value: "8081"
        - name: MINIO_HOST
          value: v3io-webapi
        - name: MINIO_ACCESS_KEY
          value: <accesskey>
        - name: HTTP_AUTHORIZATION_KEY
          value: X-v3io-session-key
        - name: HTTP_AUTHORIZATION_DEFAULT_VALUE
          value: <accesskey>
        - name: MINIO_V3IO
          value: "1"
        image: quay.io/iguazio/ml-pipelines-frontend-v3io
        imagePullPolicy: IfNotPresent
        name: ml-pipeline-ui
        ports:
        - containerPort: 3000
      serviceAccountName: ml-pipeline-ui
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  labels:
    app: ml-pipeline-viewer-crd
  name: ml-pipeline-viewer-crd
  namespace: <namespace>
spec:
  selector:
    matchLabels:
      app: ml-pipeline-viewer-crd
  template:
    metadata:
      labels:
        app: ml-pipeline-viewer-crd
    spec:
      containers:
      - image: gcr.io/ml-pipeline/viewer-crd-controller:0.1.20
        imagePullPolicy: Always
        name: ml-pipeline-viewer-crd
      serviceAccountName: ml-pipeline-viewer-crd-service-account
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  labels:
    app: ml-pipeline
  name: ml-pipeline
  namespace: <namespace>
spec:
  selector:
    matchLabels:
      app: ml-pipeline
  template:
    metadata:
      labels:
        app: ml-pipeline
    spec:
      containers:
      - env:
        - name: OBJECTSTORECONFIG_ACCESSKEY
          value: <accesskey>
        - name: OBJECTSTORECONFIG_SECRETACCESSKEY
          value: minio123
        - name: OBJECTSTORECONFIG_BUCKETNAME
          value: mlpipeline
        - name: OBJECTSTORECONFIG_PORT
          value: "8081"
        - name: OBJECTSTORECONFIG_HOST
          value: v3io-webapi
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: yhaviv/kfapi:latest
        imagePullPolicy: IfNotPresent
        name: ml-pipeline-api-server
        ports:
        - containerPort: 8888
        - containerPort: 8887
      serviceAccountName: ml-pipeline
---
# Source: mysql/templates/init-scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: <namespace>
  name: mysql-init-scripts
  labels:
    app: mysql-kf
    chart: mysql-0.0.1
    release: mysql-kf
    heritage: Tiller
data:
  enable-root-remote-access.sql: |
    -- Allow passwordless (insecure) access to root user from anywhere
    GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;
    GRANT PROXY ON ''@'' TO 'root'@'%' WITH GRANT OPTION;
    FLUSH PRIVILEGES;

---
# Source: mysql/templates/mysql-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: <namespace>
  name: mysql-kf
  labels:
    app: mysql-kf
    chart: mysql-0.0.1
    release: mysql-kf
    heritage: Tiller
data:

  health_check.sh: |
    mysqladmin status

  init-v3io-mysql.sh: |
    #!/usr/bin/env bash
    set -e

    echo "Current user -> $(whoami)"
    LOCK_FILE=/var/lib/mysql/.init-complete
    if [ -f $LOCK_FILE ]
    then
      echo "MySQL has already been initialized. Skipping..."
    else
      echo "Initializing MySQL..."

      mysql_install_db --user=mysql --basedir=/usr --datadir=/tmp/mysql
      # and then copy the init files into real working directory (on Fuse mount)
      cp -R /tmp/mysql /var/lib/

      touch $LOCK_FILE
    fi

  v3io-mysql.sh: |
    #!/usr/bin/env bash
    set -e

    echo "Current user -> $(whoami)"

    LOCK_FILE=/var/lib/mysql/.allow-remote-access-complete
    if [ ! -f $LOCK_FILE ]
    then
      MYSQL_CONFIG=/etc/mysql/my.cnf
      INIT_SCRIPT="/etc/config/mysql/init-scripts/enable-root-remote-access.sql"

      # Call init script on startup
      echo "Adding $INIT_SCRIPT to $MYSQL_CONFIG ..."
      echo "" >> $MYSQL_CONFIG
      echo "[mysqld]" >> $MYSQL_CONFIG
      echo "init-file=$INIT_SCRIPT" >> $MYSQL_CONFIG

      touch $LOCK_FILE
    fi

    echo "Starting MySQL ..."
    # Note, "--user=root" flag allows running server as user root (default user)
    mysqld --user=root

---
# Source: mysql/templates/mysql-service.yaml
apiVersion: v1
kind: Service
metadata:
  namespace: <namespace>
  name: mysql
  labels:
    app: mysql-kf
    chart: mysql-0.0.1
    release: mysql-kf
    heritage: Tiller
spec:
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql
      protocol: TCP
  selector:
    app: mysql-kf
    release: mysql-kf

---
# Source: mysql/templates/mysql-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: <namespace>
  name: mysql-kf
  labels:
    app: mysql-kf
    chart: mysql-0.0.1
    release: mysql-kf
    heritage: Tiller
spec:
  selector:
    matchLabels:
      app: mysql-kf
      release: mysql-kf
  template:
    metadata:
      labels:
        app: mysql-kf
        release: mysql-kf
    spec:
      volumes:
        - name: mysql-init-scripts
          configMap:
            name: mysql-init-scripts
        - name: mysql-config
          configMap:
            name: mysql-kf
        # Add MySQL data mount (Fuse)
        - name: mysql-fuse
          flexVolume:
            driver: "v3io/fuse"
            options:
              container: users
              subPath: /mlpipeline/mysql-kf
              accessKey: <accesskey>
      initContainers:
        - name: init-mysql
          image: "mysql:5.6"
          imagePullPolicy: IfNotPresent
          resources:
            {}
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "true"
          command:
            - /bin/bash
            - /etc/config/mysql/init-v3io-mysql.sh
          securityContext:
            runAsUser: 1001
          volumeMounts:
            - name: mysql-fuse
              mountPath: "/var/lib/mysql"
            - name: mysql-config
              mountPath: /etc/config/mysql
      containers:
        - name: mysql-mysql
          image: "mysql:5.6"
          imagePullPolicy: IfNotPresent
          command: ["/bin/bash", "/etc/config/mysql/v3io-mysql.sh"]
          ports:
            - name: mysql
              containerPort: 3306
              protocol: TCP
          livenessProbe:
            exec:
              command:
              - /bin/bash
              - /etc/config/mysql/health_check.sh
            initialDelaySeconds: 10
            failureThreshold: 3
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
              - /bin/bash
              - /etc/config/mysql/health_check.sh
            initialDelaySeconds: 20
            failureThreshold: 3
            periodSeconds: 10
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "true"
          volumeMounts:
            - name: mysql-fuse
              mountPath: "/var/lib/mysql"
            - name: mysql-config
              mountPath: /etc/config/mysql
            - name: mysql-init-scripts
              mountPath: /etc/config/mysql/init-scripts
          resources:
            {}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: workflow-controller
  name: workflow-controller
  namespace: <namespace>
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: workflow-controller
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: workflow-controller
    spec:
      containers:
      - args:
        - --configmap
        - workflow-controller-configmap
        - --executor-image
        - argoproj/argoexec:v2.2.0
        command:
        - workflow-controller
        env:
        - name: ARGO_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: argoproj/workflow-controller:v2.2.0
        imagePullPolicy: IfNotPresent
        name: workflow-controller
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: argo
      serviceAccountName: argo
      terminationGracePeriodSeconds: 30
---
